#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <functional>
using namespace std;
#define int long long
#define double long double
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define mod 1000000007
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> new_data_set;
bool isprime(int n)
	{
    	if(n==1) return true;
    	for(int i = 2;i*i<=n;i++){
    		if(n%i==0) return false;
		}
		return true;
	}
int lcm(int a,int b){
	return (a*b)/__gcd(a,b);
}
int gcd(int a, int b) 
{ 
    if (b == 0) 
        return a; 
    return gcd(b, a % b);  
      
} 
unsigned int factorial(unsigned int n) 
{ 
    if (n == 0) 
    return 1; 
    return n * factorial(n - 1); 
} 
const int inf=1e17+7;
//const int N=2e5+5;
//int dp[100001];
//vector<int> graph[100005];
bool ispal(string s){
	int l=s.length()-1,f=0,flag=0;
	while(f<=l){
		if(s[f]==s[l]){
			f++;
			l--;
		}
		else{
			flag++;
			break;
		}
	}
	if(flag!=0)return false;
	else return true;
}
//bool visited[100005]={false};
//int sieve[1000001];
signed main(){
	FAST
	int t;
	cin>>t;
	int temp=t;
	while(t--){
		cout<<"Case #"<<temp-t<<": ";
		int n,k,p;
		cin>>n>>k>>p;
		int sum[n][k+1];
		for(int i=0;i<n;i++){
			sum[i][0]=0;
			for(int j=1;j<=k;j++){
				cin>>sum[i][j];
				if(j!=1)sum[i][j]+=sum[i][j-1];
			}
		}
		int dp[n+1][p+1];
		for(int i=0;i<=p;i++){
			dp[0][i]=0;
		}
		for(int i=0;i<=n;i++)dp[i][0]=0;
		for(int i=1;i<=n;i++){
			for(int j=1;j<=p;j++){
				dp[i][j]=0;
				for(int x=0;x<=min(j,k);x++){
					dp[i][j]=max(dp[i][j],dp[i-1][j-x]+sum[i-1][x]);
				}
				//cout<<dp[i][j]<<" ";
			}
			//cout<<endl;
		}
		
		cout<<dp[n][p]<<endl;
	}
}