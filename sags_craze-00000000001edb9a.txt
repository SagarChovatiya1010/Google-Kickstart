#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <functional>
using namespace std;
#define int long long
#define double long double
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define mod 1000000007
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> new_data_set;
bool isprime(int n)
	{
    	if(n==1) return true;
    	for(int i = 2;i*i<=n;i++){
    		if(n%i==0) return false;
		}
		return true;
	}
int lcm(int a,int b){
	return (a*b)/__gcd(a,b);
}
int gcd(int a, int b) 
{ 
    if (b == 0) 
        return a; 
    return gcd(b, a % b);  
      
} 
unsigned int factorial(unsigned int n) 
{ 
    if (n == 0) 
    return 1; 
    return n * factorial(n - 1); 
} 
const int inf=1e17+7;
//const int N=2e5+5;
//int dp[100001];
//vector<int> graph[100005];
bool ispal(string s){
	int l=s.length()-1,f=0,flag=0;
	while(f<=l){
		if(s[f]==s[l]){
			f++;
			l--;
		}
		else{
			flag++;
			break;
		}
	}
	if(flag!=0)return false;
	else return true;
}
//bool visited[100005]={false};
//int sieve[1000001];
signed main(){
	FAST
	int t;
	cin>>t;
	int temp=t;
	while(t--){
		int n,k;
		cin>>n>>k;
		int arr[n];
		for(int i=0;i<n;i++)cin>>arr[i];
		vector<int>diff;
		for(int i=1;i<n;i++){
			diff.push_back(arr[i]-arr[i-1]);
		}
		//sort(diff,diff+n-1);
		sort(diff.begin(),diff.end());
		while(k--){
			//for(auto &x:diff)cout<<x<<" ";
			//cout<<endl;
			int x=diff[diff.size()-1];
			//diff.pop_back();
			if(x==1)break;
			//diff.erase(diff.begin()+diff.size()-1);
			if(x%2==0){
				//diff[diff.size()-1]=x/2;
				//diff.push_back(x/2);
				//diff.push_back(x/2);
				*(diff.end()-1)=x/2;
				diff.push_back(x/2);
			}
			else{
				//diff.push_back(x/2);
				//diff[diff.size()-1]=x/2;
				//diff.push_back(ceil(x/2));
				*(diff.end()-1)=(x/2)+1;
				diff.push_back(x/2);
			}
			sort(diff.begin(),diff.end());
			
		}
		cout<<"Case #"<<temp-t<<": "<<diff[diff.size()-1]<<endl;
	}
}